#!/usr/bin/env python3
"""
Test completo para verificar guardado de cartão CNPJ
Verifica que se guarde tanto en bucket 'documents' como en tabla 'documents'
"""
import os
import asyncio
from datetime import datetime
from dotenv import load_dotenv
from src.services.cnpj_service import CNPJService
from supabase import create_client, Client

# Cargar variables de entorno
load_dotenv()

async def test_cartao_cnpj_completo():
    """
    Test completo del guardado de cartão CNPJ
    """
    
    print("🧪 TEST COMPLETO: CARTÃO CNPJ - BUCKET + TABLA DOCUMENTS\n")
    
    # Configuración del test
    TEST_CNPJ = "37335118000180"
    TEST_CASE_ID = f"TEST_CARTAO_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    
    print(f"📋 CONFIGURACIÓN DEL TEST:")
    print(f"   CNPJ: {TEST_CNPJ}")
    print(f"   Case ID: {TEST_CASE_ID}")
    
    # Verificar credenciales de Supabase
    supabase_url = os.getenv("SUPABASE_URL")
    supabase_key = os.getenv("SUPABASE_ANON_KEY")
    
    if not supabase_url or not supabase_key:
        print("❌ Error: Credenciales de Supabase no configuradas")
        return
    
    print(f"\n🔍 VERIFICANDO CREDENCIALES:")
    print(f"   Supabase URL: {'✅ Configurado' if supabase_url else '❌ Faltante'}")
    print(f"   Supabase Key: {'✅ Configurado' if supabase_key else '❌ Faltante'}")
    
    try:
        # Inicializar clientes
        supabase: Client = create_client(supabase_url, supabase_key)
        cnpj_service = CNPJService(supabase)
        
        print(f"\n🚀 PASO 1: Generando cartão CNPJ...")
        
        # Generar cartão CNPJ
        result = await cnpj_service.gerar_e_armazenar_cartao_cnpj(
            cnpj=TEST_CNPJ,
            case_id=TEST_CASE_ID,
            save_to_database=True
        )
        
        if result.get("success"):
            print(f"✅ Cartão gerado exitosamente:")
            print(f"   📄 CNPJ: {result['cnpj']}")
            print(f"   🏢 Razão Social: {result['razao_social']}")
            print(f"   📁 Storage Path: {result['file_path']}")
            print(f"   🔗 URL Pública: {result['supabase_public_url']}")
            print(f"   🆔 Document ID: {result.get('supabase_document_id', 'N/A')}")
            print(f"   💾 Guardado en tabla: {'✅ Sí' if result.get('saved_to_database') else '❌ No'}")
            print(f"   📊 Tamanho: {result.get('file_size_bytes', 0):,} bytes")
        else:
            print(f"❌ Error generando cartão: {result.get('error', 'Error desconocido')}")
            return
        
        print(f"\n🔍 PASO 2: Verificando bucket 'documents'...")
        
        # Verificar que existe en Storage
        try:
            storage_info = supabase.storage.from_("documents").list(TEST_CASE_ID)
            if storage_info:
                print(f"✅ Archivo encontrado en bucket 'documents':")
                for file_info in storage_info:
                    print(f"   📄 Nombre: {file_info['name']}")
                    print(f"   📊 Tamanho: {file_info.get('metadata', {}).get('size', 'N/A')} bytes")
                    print(f"   📅 Creado: {file_info.get('created_at', 'N/A')}")
            else:
                print(f"❌ Archivo NO encontrado en bucket 'documents'")
        except Exception as e:
            print(f"❌ Error verificando bucket: {str(e)}")
        
        print(f"\n🗄️ PASO 3: Verificando tabla 'documents'...")
        
        # Verificar que existe en tabla documents
        try:
            table_response = supabase.table("documents").select("*").eq("case_id", TEST_CASE_ID).execute()
            
            if table_response.data:
                print(f"✅ Registro encontrado en tabla 'documents':")
                for doc in table_response.data:
                    print(f"   🆔 ID: {doc['id']}")
                    print(f"   📛 Nome: {doc['name']}")
                    print(f"   🏷️ Tag: {doc.get('document_tag', 'N/A')}")
                    print(f"   📄 Tipo: {doc.get('document_type', 'N/A')}")
                    print(f"   🔗 File URL: {doc.get('file_url', 'N/A')[:80]}...")
                    print(f"   📊 Status: {doc.get('status', 'N/A')}")
                    print(f"   📅 Criado: {doc.get('created_at', 'N/A')}")
                    
                    # Verificar metadados
                    metadata = doc.get('metadata', {})
                    if metadata:
                        print(f"   📋 Metadados:")
                        print(f"      CNPJ: {metadata.get('cnpj', 'N/A')}")
                        print(f"      Razão Social: {metadata.get('razao_social', 'N/A')}")
                        print(f"      API Source: {metadata.get('api_source', 'N/A')}")
                        print(f"      Generated By: {metadata.get('generated_by', 'N/A')}")
            else:
                print(f"❌ Registro NO encontrado en tabla 'documents'")
        except Exception as e:
            print(f"❌ Error verificando tabla: {str(e)}")
        
        print(f"\n🔗 PASO 4: Verificando acceso a URL pública...")
        
        # Verificar acceso a URL pública
        if result.get("supabase_public_url"):
            try:
                import aiohttp
                async with aiohttp.ClientSession() as session:
                    async with session.head(result["supabase_public_url"]) as response:
                        if response.status == 200:
                            print(f"✅ URL pública accesible:")
                            print(f"   🔗 Status: {response.status}")
                            print(f"   📄 Content-Type: {response.headers.get('content-type', 'N/A')}")
                            print(f"   📊 Content-Length: {response.headers.get('content-length', 'N/A')}")
                        else:
                            print(f"❌ URL pública no accesible: Status {response.status}")
            except Exception as e:
                print(f"❌ Error verificando URL: {str(e)}")
        
        print(f"\n🎯 RESUMEN FINAL:")
        print(f"   📦 Bucket 'documents': {'✅ OK' if storage_info else '❌ FALLO'}")
        print(f"   🗄️ Tabla 'documents': {'✅ OK' if table_response.data else '❌ FALLO'}")
        print(f"   🔗 URL pública: {'✅ OK' if result.get('supabase_public_url') else '❌ FALLO'}")
        print(f"   💾 Integración completa: {'✅ EXITOSA' if all([storage_info, table_response.data, result.get('supabase_public_url')]) else '❌ PARCIAL'}")
        
    except Exception as e:
        print(f"❌ Error inesperado: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_cartao_cnpj_completo())