#!/usr/bin/env python3
"""
Demostraci√≥n del sistema de manejo de errores integrado con APIs reales.
Muestra c√≥mo el sistema maneja errores de Pipefy, CNPJ, Twilio y Supabase.
"""

import asyncio
import logging
import sys
import os
from datetime import datetime
from unittest.mock import patch

# Agregar el directorio padre al path para importar m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.integrations.pipefy_client import PipefyClient
from src.integrations.cnpj_client import CNPJClient
from src.integrations.twilio_client import TwilioClient
from src.services.database_service import DatabaseService
from src.utils.error_handler import get_error_handler, reset_error_handler
from src.services.error_notification_service import get_error_notification_service

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class ErrorHandlingDemo:
    """Demostraci√≥n del sistema de manejo de errores."""
    
    def __init__(self):
        """Inicializa la demostraci√≥n."""
        self.error_handler = get_error_handler()
        self.notification_service = get_error_notification_service()
        
        # Reset para demo limpia
        reset_error_handler()
        self.error_handler = get_error_handler()
    
    async def demo_pipefy_error_handling(self):
        """Demuestra el manejo de errores de Pipefy."""
        print("\nüîß === DEMO: Manejo de Errores de Pipefy ===")
        
        try:
            pipefy_client = PipefyClient()
            
            # Intentar mover un card inexistente (deber√≠a fallar)
            print("üìã Intentando mover card inexistente...")
            result = await pipefy_client.move_card_to_phase("INVALID_CARD_ID", "INVALID_PHASE_ID")
            print(f"‚úÖ Resultado (con manejo de errores): {result}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error capturado: {type(e).__name__}: {e}")
        
        # Mostrar estad√≠sticas
        stats = self.error_handler.get_error_stats()
        print(f"üìä Errores registrados: {stats['total_errors']}")
        if stats['apis']:
            print(f"üìä APIs afectadas: {list(stats['apis'].keys())}")
    
    async def demo_cnpj_error_handling(self):
        """Demuestra el manejo de errores de CNPJ."""
        print("\nüè¢ === DEMO: Manejo de Errores de CNPJ ===")
        
        try:
            cnpj_client = CNPJClient(timeout=5)  # Timeout corto para demo
            
            # Intentar consultar CNPJ inv√°lido
            print("üîç Intentando consultar CNPJ inv√°lido...")
            result = await cnpj_client.get_cnpj_data("00.000.000/0000-00")
            print(f"‚úÖ Resultado (con manejo de errores): {result}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error capturado: {type(e).__name__}: {e}")
        
        # Mostrar estad√≠sticas
        stats = self.error_handler.get_error_stats()
        print(f"üìä Errores registrados: {stats['total_errors']}")
        if stats['apis']:
            print(f"üìä APIs afectadas: {list(stats['apis'].keys())}")
    
    async def demo_twilio_error_handling(self):
        """Demuestra el manejo de errores de Twilio."""
        print("\nüì± === DEMO: Manejo de Errores de Twilio ===")
        
        try:
            twilio_client = TwilioClient()
            
            # Intentar enviar mensaje a n√∫mero inv√°lido
            print("üìû Intentando enviar WhatsApp a n√∫mero inv√°lido...")
            result = await twilio_client.send_whatsapp_message(
                to_number="+invalid_number",
                message="Test message"
            )
            print(f"‚úÖ Resultado (con manejo de errores): {result}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error capturado: {type(e).__name__}: {e}")
        
        # Mostrar estad√≠sticas
        stats = self.error_handler.get_error_stats()
        print(f"üìä Errores registrados: {stats['total_errors']}")
        if stats['apis']:
            print(f"üìä APIs afectadas: {list(stats['apis'].keys())}")
    
    async def demo_supabase_error_handling(self):
        """Demuestra el manejo de errores de Supabase."""
        print("\nüóÑÔ∏è === DEMO: Manejo de Errores de Supabase ===")
        
        try:
            db_service = DatabaseService()
            
            # Intentar obtener caso inexistente
            print("üîç Intentando obtener caso inexistente...")
            result = await db_service.get_case_tracking("INVALID_CASE_ID")
            print(f"‚úÖ Resultado (con manejo de errores): {result}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error capturado: {type(e).__name__}: {e}")
        
        # Mostrar estad√≠sticas
        stats = self.error_handler.get_error_stats()
        print(f"üìä Errores registrados: {stats['total_errors']}")
        if stats['apis']:
            print(f"üìä APIs afectadas: {list(stats['apis'].keys())}")
    
    async def demo_circuit_breaker_simulation(self):
        """Simula el circuit breaker en acci√≥n."""
        print("\n‚ö° === DEMO: Circuit Breaker en Acci√≥n ===")
        
        # Simular m√∫ltiples errores consecutivos
        print("üî• Simulando m√∫ltiples errores consecutivos...")
        
        # Usar mock para simular errores
        with patch('src.integrations.cnpj_client.CNPJClient.get_cnpj_data') as mock_get_data:
            mock_get_data.side_effect = Exception("Simulated API failure")
            
            cnpj_client = CNPJClient()
            
            # Intentar 6 veces para activar circuit breaker
            for i in range(6):
                try:
                    print(f"üîÑ Intento {i+1}/6...")
                    await cnpj_client.get_cnpj_data("11.222.333/0001-81")
                except Exception as e:
                    print(f"‚ùå Error {i+1}: {type(e).__name__}")
                    
                    # Verificar si circuit breaker se activ√≥
                    if i >= 4:  # Despu√©s de 5 errores
                        is_open = self.error_handler._is_circuit_breaker_open("cnpj_api")
                        if is_open:
                            print("‚ö° ¬°Circuit breaker activado! Bloqueando m√°s intentos.")
                            break
        
        # Mostrar estad√≠sticas finales
        stats = self.error_handler.get_error_stats()
        print(f"\nüìä Estad√≠sticas finales:")
        print(f"   Total de errores: {stats['total_errors']}")
        print(f"   APIs afectadas: {list(stats['apis'].keys())}")
        print(f"   Tipos de error: {list(stats['error_types'].keys())}")
    
    async def demo_error_notifications(self):
        """Demuestra las notificaciones de errores."""
        print("\nüì¢ === DEMO: Notificaciones de Errores ===")
        
        # Simular error cr√≠tico
        print("üö® Simulando error cr√≠tico...")
        
        from src.utils.error_handler import APIError, APIErrorType, APIErrorSeverity
        
        critical_error = APIError(
            api_name="supabase",
            error_type=APIErrorType.SERVER_ERROR,
            severity=APIErrorSeverity.CRITICAL,
            message="Database connection completely lost",
            status_code=500,
            timestamp=datetime.now()
        )
        
        # Formatear mensaje de notificaci√≥n
        message = self.notification_service._format_critical_error_message(critical_error)
        print(f"üì± Mensaje de notificaci√≥n generado:")
        print(f"   {message}")
        
        # Simular error de autenticaci√≥n
        print("\nüîê Simulando error de autenticaci√≥n...")
        
        auth_error = APIError(
            api_name="pipefy",
            error_type=APIErrorType.AUTHENTICATION_ERROR,
            severity=APIErrorSeverity.HIGH,
            message="API token expired",
            status_code=401,
            timestamp=datetime.now()
        )
        
        message = self.notification_service._format_authentication_failure_message(auth_error)
        print(f"üì± Mensaje de notificaci√≥n generado:")
        print(f"   {message}")
    
    async def run_full_demo(self):
        """Ejecuta la demostraci√≥n completa."""
        print("üöÄ === DEMOSTRACI√ìN COMPLETA DEL SISTEMA DE MANEJO DE ERRORES ===")
        print("\nüéØ Este demo muestra c√≥mo el sistema maneja errores de todas las APIs externas:")
        print("   ‚Ä¢ Pipefy (GraphQL API)")
        print("   ‚Ä¢ CNPJ√° (REST API)")
        print("   ‚Ä¢ Twilio (WhatsApp API)")
        print("   ‚Ä¢ Supabase (Database API)")
        print("\nüõ°Ô∏è Caracter√≠sticas del sistema:")
        print("   ‚Ä¢ Clasificaci√≥n autom√°tica de errores")
        print("   ‚Ä¢ Reintentos con backoff exponencial")
        print("   ‚Ä¢ Circuit breaker para prevenir cascadas")
        print("   ‚Ä¢ Logging estructurado")
        print("   ‚Ä¢ Notificaciones autom√°ticas")
        print("   ‚Ä¢ Estad√≠sticas en tiempo real")
        
        try:
            # Ejecutar demos individuales
            await self.demo_pipefy_error_handling()
            await self.demo_cnpj_error_handling()
            await self.demo_twilio_error_handling()
            await self.demo_supabase_error_handling()
            await self.demo_circuit_breaker_simulation()
            await self.demo_error_notifications()
            
            # Resumen final
            print("\nüéâ === DEMOSTRACI√ìN COMPLETADA EXITOSAMENTE ===")
            
            final_stats = self.error_handler.get_error_stats()
            print(f"\nüìà Resumen de la sesi√≥n:")
            print(f"   Total de errores procesados: {final_stats['total_errors']}")
            print(f"   APIs probadas: {len(final_stats['apis'])}")
            print(f"   Tipos de error encontrados: {len(final_stats['error_types'])}")
            
            print("\n‚úÖ El sistema de manejo de errores est√° funcionando correctamente!")
            print("\nüîß Pr√≥ximos pasos:")
            print("   ‚Ä¢ El sistema est√° listo para producci√≥n")
            print("   ‚Ä¢ Configurar alertas de WhatsApp para el equipo de operaciones")
            print("   ‚Ä¢ Monitorear dashboards de errores en tiempo real")
            print("   ‚Ä¢ Ajustar umbrales de circuit breaker seg√∫n necesidades")
            
        except Exception as e:
            print(f"\n‚ùå Error en la demostraci√≥n: {e}")
            raise


async def main():
    """Funci√≥n principal."""
    demo = ErrorHandlingDemo()
    await demo.run_full_demo()


if __name__ == "__main__":
    asyncio.run(main()) 