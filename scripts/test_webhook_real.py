#!/usr/bin/env python3
"""
Script para probar el webhook de triagem en tiempo real.
Env√≠a una solicitud POST al servidor local para simular el webhook de Pipefy.
"""

import json
import httpx
import asyncio
from datetime import datetime

async def test_webhook_endpoint():
    """Probar el endpoint del webhook con datos simulados"""
    
    print("üöÄ PRUEBA REAL DEL WEBHOOK DE TRIAGEM")
    print("=" * 45)
    
    # URL del servidor local
    webhook_url = "http://localhost:8000/webhook/triagem"
    
    # Payload simulado del webhook de Pipefy
    test_payload = {
        "data": {
            "card": {
                "id": "test_card_456789",
                "title": "Documento de Teste Real - CNPJ 12.345.678/0001-90",
                "current_phase": {
                    "id": "338000020",
                    "name": "Triagem de Documentos"
                },
                "fields": [
                    {
                        "field": {
                            "id": "cnpj_field",
                            "label": "CNPJ"
                        },
                        "value": "12.345.678/0001-90"
                    },
                    {
                        "field": {
                            "id": "empresa_field",
                            "label": "Nome da Empresa"
                        },
                        "value": "Empresa Teste LTDA"
                    }
                ],
                "attachments": [
                    {
                        "id": "attachment_test_1",
                        "name": "contrato_social.pdf",
                        "url": "https://example.com/contrato_social.pdf"
                    },
                    {
                        "id": "attachment_test_2",
                        "name": "documento_cnpj.pdf", 
                        "url": "https://example.com/documento_cnpj.pdf"
                    }
                ]
            }
        }
    }
    
    print(f"üì° Enviando payload al webhook: {webhook_url}")
    print(f"üìÑ Card ID: {test_payload['data']['card']['id']}")
    print(f"üìé Attachments: {len(test_payload['data']['card']['attachments'])}")
    
    try:
        # Enviar solicitud POST al webhook
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(
                webhook_url,
                json=test_payload,
                headers={"Content-Type": "application/json"}
            )
            
            print(f"\nüìä RESPUESTA DEL SERVIDOR:")
            print(f"   Status Code: {response.status_code}")
            print(f"   Headers: {dict(response.headers)}")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Webhook procesado exitosamente!")
                print(f"   Respuesta: {json.dumps(result, indent=2, ensure_ascii=False)}")
                
                # Verificar que el procesamiento fue exitoso
                if result.get("success"):
                    print(f"\nüéâ ¬°Procesamiento completado exitosamente!")
                    if "card_moved" in result:
                        print(f"   Card movido: {result.get('card_moved', False)}")
                    if "fields_updated" in result:
                        print(f"   Campos actualizados: {result.get('fields_updated', False)}")
                else:
                    print(f"\n‚ö†Ô∏è  Procesamiento completado con advertencias")
                    if "error" in result:
                        print(f"   Error: {result['error']}")
                        
            else:
                print(f"‚ùå Error en el webhook:")
                print(f"   Status: {response.status_code}")
                print(f"   Texto: {response.text}")
                
    except httpx.ConnectError:
        print("‚ùå No se pudo conectar al servidor.")
        print("   Aseg√∫rate de que el servidor est√© ejecut√°ndose en localhost:8000")
        print("   Ejecuta: python3 -m uvicorn app:app --host 0.0.0.0 --port 8000 --reload")
        
    except httpx.TimeoutException:
        print("‚ùå Timeout al conectar con el servidor.")
        print("   El procesamiento puede estar tomando m√°s tiempo del esperado.")
        
    except Exception as e:
        print(f"‚ùå Error inesperado: {str(e)}")

async def test_health_endpoint():
    """Verificar que el servidor est√© funcionando"""
    print("üè• Verificando estado del servidor...")
    
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get("http://localhost:8000/health")
            
            if response.status_code == 200:
                result = response.json()
                print(f"‚úÖ Servidor funcionando correctamente")
                print(f"   Status: {result.get('status', 'unknown')}")
                print(f"   Timestamp: {result.get('timestamp', 'unknown')}")
                return True
            else:
                print(f"‚ö†Ô∏è  Servidor responde pero con error: {response.status_code}")
                return False
                
    except httpx.ConnectError:
        print("‚ùå Servidor no est√° ejecut√°ndose o no es accesible")
        return False
    except Exception as e:
        print(f"‚ùå Error al verificar servidor: {str(e)}")
        return False

async def test_endpoints_list():
    """Verificar endpoints disponibles"""
    print("\nüìã Verificando endpoints disponibles...")
    
    endpoints_to_test = [
        ("GET", "/", "P√°gina principal"),
        ("GET", "/health", "Health check"),
        ("GET", "/docs", "Documentaci√≥n API"),
        ("POST", "/webhook/triagem", "Webhook de triagem")
    ]
    
    for method, endpoint, description in endpoints_to_test:
        url = f"http://localhost:8000{endpoint}"
        
        try:
            async with httpx.AsyncClient(timeout=5.0) as client:
                if method == "GET":
                    response = await client.get(url)
                elif method == "POST":
                    # Para POST, solo verificamos que el endpoint existe
                    response = await client.post(url, json={})
                
                status_icon = "‚úÖ" if response.status_code < 500 else "‚ùå"
                print(f"   {status_icon} {method} {endpoint}: {response.status_code} - {description}")
                
        except Exception as e:
            print(f"   ‚ùå {method} {endpoint}: Error - {description}")

async def main():
    """Funci√≥n principal"""
    print("üîß PRUEBA COMPLETA DEL SISTEMA DE TRIAGEM")
    print("=" * 50)
    
    # 1. Verificar que el servidor est√© funcionando
    server_ok = await test_health_endpoint()
    
    if not server_ok:
        print("\nüí° INSTRUCCIONES PARA INICIAR EL SERVIDOR:")
        print("   1. Abrir una nueva terminal")
        print("   2. Navegar al directorio del proyecto")
        print("   3. Ejecutar: python3 -m uvicorn app:app --host 0.0.0.0 --port 8000 --reload")
        print("   4. Esperar a que aparezca 'Application startup complete'")
        print("   5. Ejecutar este script nuevamente")
        return
    
    # 2. Verificar endpoints disponibles
    await test_endpoints_list()
    
    # 3. Probar el webhook de triagem
    print("\n" + "=" * 50)
    await test_webhook_endpoint()
    
    print("\n" + "=" * 50)
    print("üéØ PRUEBA COMPLETADA")
    print("   Para ver los logs del servidor, revisa la terminal donde est√° ejecut√°ndose.")
    print("   Para detener el servidor, presiona Ctrl+C en esa terminal.")

if __name__ == "__main__":
    asyncio.run(main())