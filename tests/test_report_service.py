"""
Tests unitarios para el servicio de generaci√≥n de reportes.
"""
import pytest
from datetime import datetime, timedelta
from src.services.report_service import (
    ReportService,
    ReportMetadata,
    report_service
)
from src.services.classification_service import (
    ClassificationResult,
    DocumentAnalysis,
    ClassificationType,
    DocumentType
)

class TestReportService:
    """Tests para el servicio de generaci√≥n de reportes."""
    
    @pytest.fixture
    def service(self):
        """Fixture que retorna una instancia del servicio."""
        return ReportService()
    
    @pytest.fixture
    def sample_metadata(self):
        """Fixture con metadados de exemplo."""
        return ReportMetadata(
            generated_at=datetime(2024, 6, 15, 14, 30, 0),
            case_id="CASE-12345",
            company_name="Empresa Teste Ltda",
            cnpj="12.345.678/0001-99",
            analyst="Jo√£o Silva"
        )
    
    @pytest.fixture
    def approved_classification_result(self):
        """Fixture com resultado de classifica√ß√£o aprovado."""
        analyses = [
            DocumentAnalysis(DocumentType.CARTAO_CNPJ, True, True, [], 30),
            DocumentAnalysis(DocumentType.CONTRATO_SOCIAL, True, True, [], 60),
            DocumentAnalysis(DocumentType.RG_CPF_SOCIOS, True, True, []),
            DocumentAnalysis(DocumentType.BALANCO_PATRIMONIAL, True, True, [])
        ]
        
        return ClassificationResult(
            classification=ClassificationType.APROVADO,
            confidence_score=0.95,
            summary="Documenta√ß√£o aprovada",
            document_analyses=analyses,
            blocking_issues=[],
            non_blocking_issues=[],
            auto_actions_possible=[]
        )
    
    @pytest.fixture
    def blocking_issues_result(self):
        """Fixture com resultado com pend√™ncias bloqueantes."""
        analyses = [
            DocumentAnalysis(DocumentType.CARTAO_CNPJ, True, True, [], 30),
            DocumentAnalysis(DocumentType.CONTRATO_SOCIAL, False, False, ["Documento obrigat√≥rio ausente"], None),
            DocumentAnalysis(DocumentType.RG_CPF_SOCIOS, False, False, ["Documento obrigat√≥rio ausente"], None)
        ]
        
        return ClassificationResult(
            classification=ClassificationType.PENDENCIA_BLOQUEANTE,
            confidence_score=0.25,
            summary="Pend√™ncias bloqueantes identificadas",
            document_analyses=analyses,
            blocking_issues=[
                "Contrato Social ausente",
                "RG/CPF dos s√≥cios ausente"
            ],
            non_blocking_issues=[],
            auto_actions_possible=[]
        )
    
    @pytest.fixture
    def non_blocking_issues_result(self):
        """Fixture com resultado com pend√™ncias n√£o-bloqueantes."""
        analyses = [
            DocumentAnalysis(DocumentType.CARTAO_CNPJ, False, False, ["Documento ausente"], None, True),
            DocumentAnalysis(DocumentType.CONTRATO_SOCIAL, True, True, [], 60),
            DocumentAnalysis(DocumentType.RG_CPF_SOCIOS, True, True, [])
        ]
        
        return ClassificationResult(
            classification=ClassificationType.PENDENCIA_NAO_BLOQUEANTE,
            confidence_score=0.75,
            summary="Pend√™ncias n√£o-bloqueantes identificadas",
            document_analyses=analyses,
            blocking_issues=[],
            non_blocking_issues=["Cart√£o CNPJ ausente"],
            auto_actions_possible=["Gerar automaticamente: Cart√£o CNPJ"]
        )
    
    def test_service_initialization(self, service):
        """Test inicializa√ß√£o do servi√ßo."""
        assert service is not None
        assert service.classification_service is not None
    
    def test_generate_detailed_report_approved(self, service, approved_classification_result, sample_metadata):
        """Test gera√ß√£o de relat√≥rio detalhado para caso aprovado."""
        report = service.generate_detailed_report(
            approved_classification_result,
            sample_metadata,
            include_technical_details=True
        )
        
        # Verificar estrutura b√°sica
        assert "# ‚úÖ Relat√≥rio de Triagem Documental" in report
        assert "## üìã Resumo Executivo" in report
        assert "## üéØ Detalhes da Classifica√ß√£o" in report
        assert "## üìÑ An√°lise Detalhada dos Documentos" in report
        assert "## üîç Pend√™ncias e Recomenda√ß√µes" in report
        assert "## üîß Detalhes T√©cnicos" in report
        
        # Verificar metadados
        assert "Empresa Teste Ltda" in report
        assert "12.345.678/0001-99" in report
        assert "CASE-12345" in report
        assert "Jo√£o Silva" in report
        
        # Verificar classifica√ß√£o
        assert "Aprovado" in report
        assert "95.0%" in report
        assert "APROVADA" in report
        
        # Verificar que n√£o h√° se√ß√£o de a√ß√µes autom√°ticas (caso aprovado)
        assert "## ü§ñ A√ß√µes Autom√°ticas Dispon√≠veis" not in report
    
    def test_generate_detailed_report_blocking_issues(self, service, blocking_issues_result):
        """Test gera√ß√£o de relat√≥rio para caso com pend√™ncias bloqueantes."""
        report = service.generate_detailed_report(
            blocking_issues_result,
            include_technical_details=False
        )
        
        # Verificar classifica√ß√£o
        assert "üö´" in report
        assert "Pendencia_Bloqueante" in report
        assert "25.0%" in report
        
        # Verificar pend√™ncias bloqueantes
        assert "üö´ Pend√™ncias Bloqueantes" in report
        assert "Contrato Social ausente" in report
        assert "RG/CPF dos s√≥cios ausente" in report
        
        # Verificar que n√£o h√° detalhes t√©cnicos
        assert "## üîß Detalhes T√©cnicos" not in report
    
    def test_generate_detailed_report_non_blocking_issues(self, service, non_blocking_issues_result):
        """Test gera√ß√£o de relat√≥rio para caso com pend√™ncias n√£o-bloqueantes."""
        report = service.generate_detailed_report(non_blocking_issues_result)
        
        # Verificar classifica√ß√£o
        assert "‚ö†Ô∏è" in report
        assert "Pendencia_NaoBloqueante" in report
        assert "75.0%" in report
        
        # Verificar pend√™ncias n√£o-bloqueantes
        assert "‚ö†Ô∏è Pend√™ncias N√£o-Bloqueantes" in report
        assert "Cart√£o CNPJ ausente" in report
        
        # Verificar a√ß√µes autom√°ticas
        assert "## ü§ñ A√ß√µes Autom√°ticas Dispon√≠veis" in report
        assert "Gerar automaticamente: Cart√£o CNPJ" in report
    
    def test_generate_summary_report_approved(self, service, approved_classification_result, sample_metadata):
        """Test gera√ß√£o de relat√≥rio resumido para caso aprovado."""
        summary = service.generate_summary_report(approved_classification_result, sample_metadata)
        
        # Verificar elementos essenciais
        assert "**Status:** ‚úÖ Aprovado" in summary
        assert "**Confian√ßa:** 95.0%" in summary
        assert "**Documentos:** 4/4 v√°lidos" in summary
        assert "15/06/2024 √†s 14:30" in summary
        
        # Verificar que n√£o h√° pend√™ncias (caso aprovado)
        assert "Pend√™ncias Bloqueantes" not in summary
        assert "Pend√™ncias N√£o-Bloqueantes" not in summary
    
    def test_generate_summary_report_with_issues(self, service, blocking_issues_result):
        """Test gera√ß√£o de relat√≥rio resumido com pend√™ncias."""
        summary = service.generate_summary_report(blocking_issues_result)
        
        # Verificar elementos essenciais
        assert "**Status:** üö´ Pendencia_Bloqueante" in summary
        assert "**Confian√ßa:** 25.0%" in summary
        assert "**üö´ Pend√™ncias Bloqueantes:** 2" in summary
    
    def test_generate_summary_report_with_auto_actions(self, service, non_blocking_issues_result):
        """Test gera√ß√£o de relat√≥rio resumido com a√ß√µes autom√°ticas."""
        summary = service.generate_summary_report(non_blocking_issues_result)
        
        # Verificar elementos essenciais
        assert "**Status:** ‚ö†Ô∏è Pendencia_NaoBloqueante" in summary
        assert "**‚ö†Ô∏è Pend√™ncias N√£o-Bloqueantes:** 1" in summary
        assert "**ü§ñ A√ß√µes Autom√°ticas:** 1 dispon√≠veis" in summary
    
    def test_get_status_emoji(self, service):
        """Test obten√ß√£o de emojis por status."""
        assert service._get_status_emoji(ClassificationType.APROVADO) == "‚úÖ"
        assert service._get_status_emoji(ClassificationType.PENDENCIA_BLOQUEANTE) == "üö´"
        assert service._get_status_emoji(ClassificationType.PENDENCIA_NAO_BLOQUEANTE) == "‚ö†Ô∏è"
    
    def test_get_document_display_name(self, service):
        """Test obten√ß√£o de nomes de exibi√ß√£o dos documentos."""
        assert "Cart√£o CNPJ emitido dentro dos 90 dias" in service._get_document_display_name(DocumentType.CARTAO_CNPJ)
        assert "√öltimo Contrato Social" in service._get_document_display_name(DocumentType.CONTRATO_SOCIAL)
        assert "RG e CPF dos s√≥cios" in service._get_document_display_name(DocumentType.RG_CPF_SOCIOS)
    
    def test_global_service_instance(self):
        """Test inst√¢ncia global do servi√ßo."""
        assert report_service is not None
        assert isinstance(report_service, ReportService)